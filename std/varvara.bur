(use* core)

(device System 0x00
	[_unused   U16]
	[expansion U16] // @ExpansionCmd
	[wst        U8]
	[rst        U8]
	[metadata  U16] // @Metadata
	[red       U16]
	[green     U16]
	[blue      U16]
	[debug      U8]
	[state      U8]
)

(device Console 0x10
	[vector U16] //vector (Fn u8 --)]
	[read U8]
	[exec U8]          // ? (not documented)
	[mode U8]          // ? (not documented)
	[dead U8]          // ? (not documented)
	[exit U8]          // ? (not documented)
	[type U8] //type ConsoleType] // enum
	[write U8]         // stdout
	[error U8]         // stderr
)

(word dei   (           AnyDev -- (USz $0)     ) [ (asm "g" .Op/Odei)       ])
(word deo   ((AnySz $0) AnyDev --              ) [ (asm "g" .Op/Odeo)       ])
(word dbg   (                  --              ) [ 0x1 .System/debug deo    ])
(word emit  (             Any8 --              ) [ .Console/write deo       ])
(word nl    (                  --              ) [ 0x0a emit                ])

(word print-string (@U8 -- ) [ ldak (while [ 0<> ] [ emit 1+ ldak ]) drop drop ])
(word print-bool (Bool -- ) [ (when [ "T" ] [ "nil" ]) print-string ])

(word print8 (U8 --) [
	dup 0= (when [ drop '0 emit return ])

	0x99 swap // stop indicator
	
	(until [ 0= ] [
		16 /mod
		dup 9 > (when [ 10 - 'a + ] [ '0 + ])
		swap
	])
// TODO: drop null byte?
	(until [ 0x99 = ] [ emit ])

	drop // drop stop indicator
])

(word print16 (U16 --) [
	dup 0= (when [ drop '0 emit return ])

	0x99s swap // stop indicator
	
	(wild (U16 U16 -- U16) [
		(until [ 0= ] [
			16s /mod
			dup 9s > (when [ 10s - 'as + ] [ '0s + ])
			swap
		])

		(until [ 0x99s = ] [ (as U8) emit ])
	])

	drop // drop stop indicator
])

(word print-base (Any U8 --) [
	(var base U8)
	@base <-

	dup 0= (when [ drop '0 emit return ])

	0x99 (as $1) swap // stop indicator

	(wild ($1 $1 -- $1) [
		(until [ 0= ] [
			$base (as $1) /mod
			dup 9 (as $1) > (when
				[ 10 (as $1) - 'a (as $1) + ]
				[ '0 (as $1) + ]
			)
			swap
		])

		drop // drop null byte
		(until [ 0x99 (as $1) = ] [ (as U8) emit ])
	])

	drop // drop stop indicator
])

(word print (Any --) [ 16 print-base ])
(word print-dec (Any --) [ 10 print-base ])

(test print_8 [
	10   print-dec nl (should stdout-eq "10\n")
	20   print-dec nl (should stdout-eq "20\n")
	35   print-dec nl (should stdout-eq "35\n")
	99   print-dec nl (should stdout-eq "99\n")
	999s print-dec nl (should stdout-eq "999\n")
	0    print-dec nl (should stdout-eq "0\n")
])

(test print_16 [
	0xbeefs print nl (should stdout-eq "beef\n")
	0x3b    print nl (should stdout-eq "3b\n")
	0x0d    print
	0xef    print
	0xaceds print
	0xcafes print nl (should stdout-eq "defacedcafe\n")
	0x0     print nl (should stdout-eq "0\n")
])

(test print-string [
	"\n\n\0" print-string (should stdout-eq "\n\n")
	"All hail the Emperor" print-string (should stdout-eq "All hail the Emperor")
])
