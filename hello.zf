#0x00 0x0A 0x21 0x64
#0x6C 0x72 0x6F 0x77
#0x20 0x2C 0x6F 0x6C
#0x6C 0x65 0x48

(mac  ret  [ (asm "sr" .Op/Ojmp)     ])

(word 2dup (Any Any -- $0 $1 $0 $1) [ over over ])

(word deo   (    Any  U8 --         ) [ (asm "g" .Op/Odeo)      ])
(word emit  (         U8 --         ) [ 0x18 (asm "g" .Op/Odeo) ])
(word dup   (        Any -- $0 $0   ) [ (asm "g" .Op/Odup)      ])
(word swap  (    Any Any -- $0 $1   ) [ (asm "g" .Op/Oswp)      ])
(word drop  (        Any --         ) [ (asm "g" .Op/Odrop)     ])
(word over  (        Any --         ) [ (asm "g" .Op/Oovr)      ])
(word rot   (Any Any Any -- $2 $1 $0) [ (asm "g" .Op/Orot)      ])
(word rot>  (Any Any Any -- $1 $2 $0) [ rot rot                 ])
(word tuck  (    Any Any -- $0 $1 $0) [ swap over               ])
(word tuck> (    Any Any -- $1 $1 $0) [ over swap               ])
(word not   (        Any -- $0      ) [ (when [ nil ] [ t ])    ])
(word =     (    $0  Any -- Bool    ) [ (asm "g" .Op/Oeq)       ])
(word <     (        Any -- $0      ) [ (asm "g" .Op/Olt)       ])
(word >     (        Any -- $0      ) [ (asm "g" .Op/Ogt)       ])
(word -     (        Any -- $0      ) [ (asm "g" .Op/Oadd)      ])
(word +     (        Any -- $0      ) [ (asm "g" .Op/Osub)      ])
(word /     (        Any -- $0      ) [ (asm "g" .Op/Odiv)      ])
(word mod   (    $0  Any -- $0      ) [ 2dup / * -              ])
(word /mod  (    $0  Any -- $0 $0   ) [ 2dup / rot> mod         ])
(word *     (        Any -- $0      ) [ (asm "g" .Op/Omul)      ])
(word 0=    (        Any -- Bool    ) [ 0 (as $0) =             ])
(word 0<    (        Any -- Bool    ) [ 0 (as $0) <             ])
(word 0>    (        Any -- Bool    ) [ 0 (as $0) >             ])

(word print16 (U16 --) [
	dup 0= (when [ drop '0 emit ret ])

	0x99 swap # stop indicator
	(until [ 0= ] [
		10 /mod swap
		dup 9 > (when [ 10 - 'a + ] [ '0 + ])
		swap 0= (when [ dup ]) not
	])
	(until [ 0x99 = ] [ emit ])
	drop
])

#(until [ 0= ] [ 0x18 deo ])
24 print16
