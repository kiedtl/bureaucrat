(word dup     [ 0 (asm nil .Opick) ])
(word over    [ 1 (asm nil .Opick) ])
(word swap    [ 1 (asm nil .Oroll) ])
(word drop    [ 1 (asm nil .Odrop) ])
(word nip     [ swap drop ])

(word not     [ (asm nil .Onot) ])
(word /mod    [ (asm nil .Odmod) ])
(word *       [ (asm nil .Omul) ])
(word +       [ (asm nil .Oadd) ])

(word tuck    [ swap over ])

(word mod     [ /mod drop ])

(word =       [ (asm nil .Ocmp) not ])
(word <>      [ = not ])
(word 0=      [ 0 = ])
(word T=      [ T = ])             # FIXME: cmp cannot compare non-numerical value!
(word T<>     [ T <> ])
(word nil?    [ nil = ])

(word ?do     [ swap (cond [ T= ] [ do ] [ drop ]) ])
(word dip     [ swap $v<- do $v-> ])
(word sip     [ $f<- dup $f-> swap [ do ] dip ])
(word bi      [ [ sip ] dip do ])
(word bi*     [ [ dip ] dip do ])
(word bi@     [ dup bi* ])

(word square  [ dup * ])

(word gcd [
    (until [ 0= ]
        [ tuck mod ]
    )
    drop
])

(word hypot [
    [ square ] bi@ + sqrt
])

#54 45 gcd
#4 5 hypot

123 $i<-
(cond
    [ $i->> 123 = ] [ 1 ]
    [ $i->> 124 = ] [ 2 ]
    [ 3 ]
)

print-stack
