(word dup     [ 0 (asm nil .Opick) ])
(word over    [ 1 (asm nil .Opick) ])
(word swap    [ 1 (asm nil .Oroll) ])
(word drop    [ 1 (asm nil .Odrop) ])
(word nip     [ swap drop ])

(word not     [ (asm nil .Onot) ])
(word /mod    [ (asm nil .Odmod) ])
(word *       [ (asm nil .Omul) ])

(word tuck    [ swap over ])

(word mod     [ /mod drop ])
(word =       [ (asm nil .Ocmp) not ])
(word 0=      [ 0 = ])

# (word ?do     [ swap (cond [ do ] [ drop ] ) ])
# (word dip     [ swap $v<- do $v ])
# (word sip     [ $f<- dup $f swap [ do ] dip ])
# (word bi      [ [ sip ] dip do ])
# (word bi*     [ [ dip ] dip do ])
# (word bi@     [ dup bi* ])

(word square  [ dup * ])

(word gcd [
    (until [ 0= ]
        [ tuck mod ]
    )
    drop
])

# (word hypot [
#     [ square ] bi@ + sqrt
# ])

#54 45 gcd
81 [ sqrt ] do
print-stack
