1 !TRUE
0 !FALSE

word mypick [[ asm $_ pick ;; ]]

word dup     <   a-aa  > ( abc -- bca )  [[ 0 pick                           ]]
word over    <   a-aaa > (  ab -- aba )  [[ 1 pick                           ]]
word uncover < aaa-aaaa> ( abc -- abca)  [[ 2 pick                           ]]
word 2drop   <  aa-    > (  ab --     )  [[ drop drop                        ]]
word ?dup                (  af -- aa? )  [[ dup if [[ dup ]]                 ]]
word 2dup    <  aa-aaaa> (  ab -- abab)  [[ over over                        ]]
word swap    <  aa-aa  > ( abc -- acb )  [[ 1 roll                           ]]
word rot     < aaa-aaa > ( abc -- bca )  [[ 2 roll                           ]]
word rot>    < aaa-aaa > ( abc -- cab )  [[ rot rot                          ]]
word tuck    <  aa-aaa > (  ab -- bab )  [[ swap over                        ]]
word nip     <  aa-a   > ( cab -- cb  )  [[ swap drop                        ]]
word reset               (..ab --     )  [[ until [[ drop depth 0=  ]]       ]]

word rev <n-*> (...n -- ... ) [[
	( keep rolling higher and higher amounts to reverse
	  the stack )
	1 until [[
		swap $ctr <- $roll <<-
		roll
		$ctr -> $roll ->
		1+ 2dup =
	]]
	2drop
]]

word ?do     <  aq-*   > (   q --     )  [[ swap if [[ do ]] orelse [[ drop ]] ]]
word dip     <  aq-*   > (  vq -- v   )  [[ swap $v <- do $v ->                ]]
word sip     <  aq-*   > (  vq -- v   )  [[ $f <- dup $f -> swap [ do ] dip    ]]
word bi      < aqq-*   > ( xqq --     )  [[ [ sip ] dip do                     ]]
word bi*     <aaqq-*   > (xyqq --     )  [[ [ dip ] dip do                     ]]
word bi@     < aaq-*   > ( xyq --     )  [[ dup bi*                            ]]

word =       <  aa-n   > (  ab -- c   )  [[ cmp not                            ]]
word <>      <  aa-n   > (  ab -- c   )  [[ = not                              ]]
word <       <  aa-n   > (  ab -- c   )  [[ cmp -1 =                           ]]
word >       <  aa-n   > (  ab -- c   )  [[ cmp 1 =                            ]]
word <=      <  aa-n   > (  ab -- c   )  [[ > not                              ]]
word >=      <  aa-n   > (  ab -- c   )  [[ < not                              ]]
word 0=      <   a-n   > (   a -- c   )  [[ 0 =                                ]]
word 0<>     <   a-n   > (   a -- c   )  [[ 0 <>                               ]]
word 0<      <   a-n   > (   a -- c   )  [[ 0 <                                ]]
word 0>      <   a-n   > (   a -- c   )  [[ 0 >                                ]]
word 0>=     <   a-n   > (   a -- c   )  [[ 0 >=                               ]]
word 0<=     <   a-n   > (   a -- c   )  [[ 0 <=                               ]]
word ><      < nnn-n   > ( nlh -- c   )  [[ 2 pick >  rot> >  and              ]]
word =><=    < nnn-n   > ( nlh -- c   )  [[ 2 pick >= rot> >= and              ]]

word 1+      <   n-n   > (   a -- c   )  [[ 1 +                                ]]
word 1-      <   n-n   > (   a -- c   )  [[ 1 -                                ]]
word 2+      <   n-n   > (   a -- c   )  [[ 2 +                                ]]
word 2-      <   n-n   > (   a -- c   )  [[ 2 -                                ]]

word /       <  nn-n   > (  ab -- c   )  [[ /mod nip                              ]]
word mod     <  nn-n   > (  ab -- d   )  [[ /mod drop                             ]]
word fact    <   n-n   > (   n -- n   )  [[ dup 1 <= ?ret dup 1- fact *           ]]
word even?   <   n-n   > (   n -- f   )  [[ 2 mod 0=                              ]]
word odd?    <   n-n   > (   n -- f   )  [[ even? not                             ]]
word trunc   <   n-n   > (   f -- n   )  [[ 0 xor                                 ]]
word fract   <   n-n   > (   f -- n   )  [[ dup trunc -                           ]]
word negate  <   n-n   > (   a -- c   )  [[ -1  *                                 ]]
word abs     <   n-n   > (   a -- c   )  [[ dup 0< if [[ negate ]]                ]]
word square  <  nn-n   > (  ab -- d   )  [[ dup *                                 ]]
word min     <  nn-n   > (  am -- c   )  [[ 2dup < if [[ nip ]] orelse [[ drop ]] ]]
word max     <  nn-n   > (  aM -- c   )  [[ 2dup > if [[ nip ]] orelse [[ drop ]] ]]
word clamp   < nnn-n   > ( amM -- c   )  [[ 2 pick swap max swap min nip          ]]
word gcd     <  nn-n   > (  ab -- n   )  [[ until [[ tuck mod dup 0= ]] drop      ]]
word powi    <  nn-n   > (  bp -- n   )  [[ 1 swap [ over * ] do-times nip        ]]
word lg      <   n-n   > (   a -- c   )  [[ 10 logn                               ]]
word lb      <   n-n   > (   a -- c   )  [[  2 logn                               ]]
word ln      <   n-n   > (   a -- c   )  [[ @E logn                               ]]

(               ⎛           ⎞
                ⎜    |a|    ⎟
   lcm(a, b) =  ⎜ ───────── ⎟ × |b|
                ⎜ gcd(a, b) ⎟
                ⎝           ⎠
)
word lcm <nn-n> ( ab -- n ) [[
	2dup           (abab)
	gcd            (abg)
	rot abs swap   (bag)
	/ swap abs *
]]

word sqrt <n-n> ( a -- c ) [[
	1
	0 $last <-
	loop [[
		2dup / over - 2 /
		dup $last -> = if [[ break ]]
		$last <<- +
	]]
	drop nip
]]


\ stolen from this SO answer: https://stackoverflow.com/a/26760082
word prime? <n-n> ( a -- f? ) [[
	cond [[
		is? [[ dup dup 2 = swap 3 =           or ]] [[ drop @TRUE  ]]
		is? [[ dup dup 2 mod 0= swap 3 mod 0= or ]] [[ drop @FALSE ]]
		any [[
			25 over > if [[
				drop @TRUE dup ?ret
			]]

			5 until [[
				(x i)
				2dup 2dup mod 0= rot> 2+ mod 0= or if [[
					2drop @FALSE
					ret
				]] orelse [[
					6 +
					dup square uncover >
				]]
			]]

			2drop @TRUE
		]]
	]]
]]

\ this uses the machin formula
\ pi = (4 * arctangent(1/5) - arctangent(1/239)) * 4
word pi     <-n> [[ (     -- n   )  4 1 5 / atan * 1 239 / atan - 4 * ]]

\
\         inf
\         ___  1
\ e = 1 + \   ───
\         /__ +n!
\         n=0
\
18 !E_ITERS
word e_iter <nn-nn> ( iters accm -- ) [[
	until [[
		swap 1- swap over
		fact 1
		swap / + over
		1 =
	]]
]]
word e      <-n> (     -- n   ) [[ @E_ITERS 0 e_iter nip 1 + ]]

pi !PI
e  !E

3735928559 !_RAND
word rand <-n> [[
	@_RAND 11109 * 13849 +
	524287 and 1 shr
	dup !_RAND
]]


( ----- formatting, misc IO stuff ----- )


word spc    <-> (     --     )  [[ 32 emit ]]
word cr     <-> (     --     )  [[ 10 emit ]]

word .s <s-> [[
	0 until [[
		dup rot> & emit
		# rot 1+ tuck =
	]]
]]

word .b <a-> [[ 0= if [[ "False" ]] orelse [[ "True" ]] .s ]]

3  !PRECISION
word .f <n-> [[ @PRECISION _.f .s ]]

10 !BASE
word print-in-decimal <-> [[ 10 !BASE ]]
word print-in-hex     <-> [[ 16 !BASE ]]

word .n <n-> [[
	dup 0< if [[
		'-' emit -1 *
	]]

	?dup 0= if [[
		'0' emit
	]] orelse [[
		999 swap (stop indicator)

		until [[
			@BASE /mod   (r q)
			trunc swap trunc (q r)

			dup 9 > if [[
				10 - 'a' +
			]] orelse [[
				'0' +
			]]
			swap ?dup not
		]]

		until [[ emit dup 999 = ]]

		drop    (drop stop indicator)
	]]
]]


( ----- tables, high-order functions, apl imitations ----- )
( TODO: implement macros and replace the redundant aliases )


\ ⊢
word identity <-> [[ ]]


( ----- loops and conditionals for quotes ----- )

word do-cond <aqq-> ( f qT qF -- * ) [[
	$F <- swap $f <<- swap ?do   \ true branch
	$f -> not $F ->        ?do   \ false branch
]]

word do-until <q-*> ( q -- ) [[
	until [[ dup dip swap ]] drop
]]

word do-times <nq-*> ( n q -- ) [[
	$f <- $i <-

	$i ->> 0= if [[
		$f >-
		drop ret
	]]

	until [[
		sw: $i [[ 1- ]]
		$f ->> do
		$i ->> 0=
	]]

	$i >- $f >-
]]

( TODO
	Argument list may have to be reordered.

	- type        <val>                  Get type of TOS.
	- :           <table> <key>          Get child from table.
	- :=          <table> <key> <val>    Set child from table to val.
	- pack        <depth>                Pack <depth> stack items into vector.
	- unpack      <vector>               Unpack vector into stack.
	- asin
	- acos
	- atan
	- acsc
	- asec
	- acot
	- format      <str> <list>
	- cons        <val> <val>
	- concat      <vec1> <vec2>
	- econcat     <vec1> <val> <vec2>
	- null?       <val>
	- contains?   <vec>
	- nullary     <q>
	- unary       <x> <q>
	- binary      <x> <y> <q>
	- ternary     <x> <y> <z> <q>
	- cleave      <x> <q1> <q2>
	- linrec      <p> <t> <r1> <r2>
	- tailrec     <p> <t> <r1>
	- binrec      <b> <t> <r1> <r2>
	- primrec     <x> <qi> <qc>
	- zip         <vec>                  Zip() high-order function.
	- longzip     <vec>                  Like zip(), but continue until all are exhausted.
	- foldl       <vec> <v0> <q>
	- foldr       <vec> <v0> <q>
	- map         <vec> <q>
	- filter      <vec> <q>
	- all         <vec> <q>              Push T if q(vec[i]) == T for all i.
	- some        <vec> <q>              Push T if q(vec[i]) == T for any i.
	- split       <vec> <q>
	- arguments
	- reverse-vec <vec>
	- utf8-decode <string>
	- utf8-encode <int>
	- .t          <table>                Pretty-print table.
	- panic       <msg>
	- unwrap      <result>
	- err         <val>
	- ok          <val>
	- import      <str>
	- pairs       <table>                Create iterator over table key/val pairs.
	- >>-         <stack>                Reset stack.
)
