1 !TRUE
0 !FALSE

word dup     ( abc -- bca )  [[ 0 pick                                   ]]
word over    ( abc -- bca )  [[ 1 pick                                   ]]
word uncover ( abc -- abca)  [[ 2 pick                                   ]]
word 2drop   (  ab -- b   )  [[ drop drop                                ]]
word ?dup    ( abc -- bca )  [[ dup if [[ dup ]]                         ]]
word 2dup    ( abc -- bca )  [[ over over                                ]]
word swap    ( abc -- bca )  [[ 1 roll                                   ]]
word rot     ( abc -- bca )  [[ 2 roll                                   ]]
word rot>    ( abc -- cab )  [[ rot rot                                  ]]
word tuck    (  ab -- bab )  [[ swap over                                ]]
word nip     (  ab -- b   )  [[ swap drop                                ]]

word ?do     (   q --     )  [[ swap if [[ do ]] orelse [[ drop ]]       ]]
word dip     (  vq -- v   )  [[ swap $v <- do $v ->                      ]]
word sip     (  vq -- v   )  [[ $f <- dup $f -> swap [ do ] dip          ]]
word bi      ( xqq --     )  [[ [ sip ] dip do                           ]]
word bi*     (xyqq --     )  [[ [ dip ] dip do                           ]]
word bi@     ( xyq --     )  [[ dup bi*                                  ]]

word do-cond [[ <aqq-> ( f qT qF -- * )
	$F <- swap $f <<- swap ?do   \ true branch
	$f -> not $F ->        ?do   \ false branch
]]

word =     [[  (  ab -- c   )  cmp not ]]
word <>    [[  (  ab -- c   )  = not ]]
word <     [[  (  ab -- c   )  cmp -1 = ]]
word >     [[  (  ab -- c   )  cmp 1 = ]]
word <=    [[  (  ab -- c   )  > not ]]
word >=    [[  (  ab -- c   )  < not ]]
word 0=    [[  (   a -- c   )  0 = ]]
word 0<>   [[  (   a -- c   )  0 <> ]]
word 0<    [[  (   a -- c   )  0 < ]]
word 0>    [[  (   a -- c   )  0 > ]]
word 0>=   [[  (   a -- c   )  0 >= ]]
word 0<=   [[  (   a -- c   )  0 <= ]]
word ><    [[  ( nlh -- c   )  2 pick >  rot> >  and ]]
word =><=  [[  ( nlh -- c   )  2 pick >= rot> >= and ]]

word 1+    [[  (   a -- c   )  1 + ]]
word 1-    [[  (   a -- c   )  1 - ]]
word 2+    [[  (   a -- c   )  2 + ]]
word 2-    [[  (   a -- c   )  2 - ]]

word do-until [[ <q-*> until [[ dup dip swap ]] drop ]]

word do-times [[ <nq-*>
	$f <- $i <-

	$i ->> 0= if [[
		$f >-
		drop ret
	]]

	until [[
		sw: $i [[ 1- ]]
		$f ->> do
		$i ->> 0=
	]]

	$i >- $f >-
]]

word /      [[  (  ab -- c   )  /mod swap drop ]]
word mod    [[  (  ab -- d   )  /mod drop ]]
word fact   [[  (   n -- n   )  dup 1 <= ?ret dup 1- fact * ]]
word even?  [[  (   n -- f   )  2 mod 0= ]]
word odd?   [[  (   n -- f   )  even? not ]]
word trunc  [[  (   f -- n   )  0 xor ]]
word fract  [[  (   f -- n   )  dup trunc - ]]
word negate [[  (  ab -- d   )  -1  * ]]
word abs    [[  (   a -- c   )  dup 0< if [[ negate ]] ]]
word square [[  (  ab -- d   )  dup * ]]
word min    [[  (  am -- c   )  2dup < if [[ nip ]] orelse [[ drop ]] ]]
word max    [[  (  aM -- c   )  2dup > if [[ nip ]] orelse [[ drop ]] ]]
word clamp  [[  ( amM -- c   )  2 pick swap max swap min swap drop ]]
word gcd    [[  (  ab -- n   )  until [[ tuck mod dup 0= ]] drop ]]

word reset  [[  ( xya --     )  until [[ drop depth 0=  ]] ]]

word rev [[ <n-*> (...n -- ... )
	( keep rolling higher and higher amounts to reverse
	  the stack )
	1 until [[
		swap $ctr <- $roll <<-
		roll
		$ctr -> $roll ->
		1+ 2dup =
	]]
	2drop
]]

(               ⎛           ⎞
                ⎜    |a|    ⎟
   lcm(a, b) =  ⎜ ───────── ⎟ × |b|
                ⎜ gcd(a, b) ⎟
                ⎝           ⎠
)
word lcm [[ <nn-> ( ab -- n )
	2dup           (abab)
	gcd            (abg)
	rot abs swap   (bag)
	/ swap abs *
]]

word ipow  [[  (  bp -- n   )  1 swap [ over * ] do-times nip ]]

word sqrt [[ <n-n>
	1
	0 $last <-
	loop [[
		2dup / over - 2 /
		dup $last -> = if [[ break ]]
		$last <<- +
	]]
	drop nip
]]


\ stolen from this SO answer: https://stackoverflow.com/a/26760082
word prime? [[
	cond [[
		is? [[ dup dup 2 = swap 3 =           or ]] [[ drop @TRUE  ]]
		is? [[ dup dup 2 mod 0= swap 3 mod 0= or ]] [[ drop @FALSE ]]
		any [[
			25 over > if [[
				drop @TRUE dup ?ret
			]]

			5 until [[
				(x i)
				2dup 2dup mod 0= rot> 2+ mod 0= or if [[
					2drop @FALSE
					ret
				]] orelse [[
					6 +
					dup square uncover >
				]]
			]]

			2drop @TRUE
		]]
	]]
]]

\ this uses the machin formula
\ pi = (4 * arctangent(1/5) - arctangent(1/239)) * 4
word pi     [[ (     -- n   )  4 1 5 / atan * 1 239 / atan - 4 * ]]

\
\         inf
\         ___  1
\ e = 1 + \   ───
\         /__ +n!
\         n=0
\
18 !E_ITERS
word e_iter [[ <nn-nn> ( iters accm -- )
	until [[
		swap 1- swap over
		fact 1
		swap / + over
		1 =
	]]
]]
word e      [[ (     -- n   ) @E_ITERS 0 e_iter nip 1 + ]]

pi !PI
e  !E

word lg     [[  (   a -- c   )  10 logn ]]
word lb     [[  (   a -- c   )   2 logn ]]
word ln     [[  (   a -- c   )  @E logn ]]

3735928559 !_RAND
word rand [[ <n->
	@_RAND 11109 * 13849 +
	524287 and 1 shr
	dup !_RAND
]]


( ----- formatting, misc IO stuff ----- )


word spc    [[ (     --     )  32 emit ]]
word cr     [[ (     --     )  10 emit ]]

word .s [[
	0 until [[
		dup rot> & emit
		# rot 1+ tuck =
	]]
]]

word .b [[ 0= if [[ "False" ]] orelse [[ "True" ]] .s ]]

3  !PRECISION
word .f [[ @PRECISION _.f .s ]]

10 !BASE
word decimal [[ 10 !BASE ]]
word hex     [[ 16 !BASE ]]

word .n [[ <n->
	dup 0< if [[
		'-' emit -1 *
	]]

	?dup 0= if [[
		'0' emit
	]] orelse [[
		999 swap (stop indicator)

		until [[
			@BASE /mod   (r q)
			trunc swap trunc (q r)

			dup 9 > if [[
				10 - 'a' +
			]] orelse [[
				'0' +
			]]
			swap ?dup not
		]]

		until [[ emit dup 999 = ]]

		drop    (drop stop indicator)
	]]
]]


( ----- tables, high-order functions, apl imitations ----- )
( TODO: implement macros and replace the redundant aliases )


\ ⊢
word identity [[ ]]


